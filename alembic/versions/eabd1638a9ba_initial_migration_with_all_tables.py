"""Initial migration with all tables

Revision ID: eabd1638a9ba
Revises: 
Create Date: 2025-05-26 14:46:01.822199

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'eabd1638a9ba'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('max_clubs', sa.Integer(), nullable=False),
    sa.Column('max_players', sa.Integer(), nullable=False),
    sa.Column('cost', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=12), nullable=False),
    sa.Column('last_name', sa.String(length=12), nullable=False),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('year_of_birth', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('is_email_verified', sa.Boolean(), nullable=True),
    sa.Column('phone', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('city', sa.String(length=30), nullable=True),
    sa.Column('country', sa.String(length=30), nullable=True),
    sa.Column('sport_category', postgresql.ENUM('FOOTBALL', 'BASKETBALL', name='sportcategoryenum'), nullable=False),
    sa.Column('positions', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('cm', sa.Integer(), nullable=True),
    sa.Column('kg', sa.Integer(), nullable=True),
    sa.Column('strong_side', postgresql.ENUM('LEFT', 'RIGHT', 'BOTH', name='strongsideenum'), nullable=True),
    sa.Column('avg_skill_rating', sa.Float(), nullable=True),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('account_status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'SUSPENDED', 'LOCKED', 'PENDING_VERIFICATION', name='accountstatusenum'), nullable=True),
    sa.Column('location', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('favorite_fields', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('friends', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('friend_requests', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('club_requests', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('total_games', sa.Integer(), nullable=True),
    sa.Column('total_points', sa.Integer(), nullable=True),
    sa.Column('total_assists', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('subscription_start_date', sa.DateTime(), nullable=True),
    sa.Column('subscription_end_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('clubs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=30), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=False),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('admin_id', sa.Integer(), nullable=False),
    sa.Column('captains', postgresql.ARRAY(sa.Integer()), nullable=True),
    sa.Column('sport_category', postgresql.ENUM('FOOTBALL', 'BASKETBALL', name='sportcategoryenum'), nullable=False),
    sa.Column('is_private', sa.Boolean(), nullable=True),
    sa.Column('max_players', sa.Integer(), nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'FULL', name='clubstatusenum'), nullable=True),
    sa.Column('location', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('pending_requests', postgresql.ARRAY(sa.Integer()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_clubs_id'), 'clubs', ['id'], unique=False)
    op.create_table('events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=False),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('club_id', sa.Integer(), nullable=False),
    sa.Column('field_id', sa.Integer(), nullable=True),
    sa.Column('location', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False),
    sa.Column('teams', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('sport_category', postgresql.ENUM('FOOTBALL', 'BASKETBALL', name='sportcategoryenum'), nullable=False),
    sa.Column('status', postgresql.ENUM('UPCOMING', 'FULL', 'ONGOING', 'COMPLETED', name='eventstatusenum'), nullable=True),
    sa.Column('max_participants', sa.Integer(), nullable=True),
    sa.Column('min_participants_to_start', sa.Integer(), nullable=True),
    sa.Column('cost', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['club_id'], ['clubs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_events_id'), 'events', ['id'], unique=False)
    op.create_table('members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('club_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('total_goals', sa.Integer(), nullable=True),
    sa.Column('total_assists', sa.Integer(), nullable=True),
    sa.Column('total_games', sa.Integer(), nullable=True),
    sa.Column('skill_rating', sa.Float(), nullable=True),
    sa.Column('positions', sa.ARRAY(sa.String()), nullable=True),
    sa.ForeignKeyConstraint(['club_id'], ['clubs.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_members_id'), 'members', ['id'], unique=False)
    op.create_table('games',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('teams', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('goals', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('result', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('winner', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_games_id'), 'games', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_games_id'), table_name='games')
    op.drop_table('games')
    op.drop_index(op.f('ix_members_id'), table_name='members')
    op.drop_table('members')
    op.drop_index(op.f('ix_events_id'), table_name='events')
    op.drop_table('events')
    op.drop_index(op.f('ix_clubs_id'), table_name='clubs')
    op.drop_table('clubs')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    # ### end Alembic commands ###
